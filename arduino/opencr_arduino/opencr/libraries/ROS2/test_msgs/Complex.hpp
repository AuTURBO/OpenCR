// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Complex.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _TEST_MSGS_COMPLEX_HPP_
#define _TEST_MSGS_COMPLEX_HPP_


#include "micrortps.hpp"
#include <topic_config.h>
#include <topic.hpp>

#include "std_msgs/Bool.hpp"
#include "std_msgs/String.hpp"


namespace test_msgs {

class Complex : public ros2::Topic<Complex>
{
public:
  typedef std_msgs::String _string_type;
  _string_type message;
  typedef std_msgs::Bool _bool_type;
  _bool_type value;

  Complex():
    message(),
    value()
  { 
	  name_ = (char*) "Complex";
    id_ = TEST_MSGS_COMPLEX_TOPIC;
  };

  virtual bool serialize(MicroBuffer* writer, const Complex* topic)
  {
      message.serialize(writer, &topic->message);
      value.serialize(writer, &topic->value);
      return writer->error == BUFFER_OK;
  }

  virtual bool deserialize(MicroBuffer* reader, Complex* topic)
  {
      message.deserialize(reader, &topic->message);
      value.deserialize(reader, &topic->value);
      return reader->error == BUFFER_OK;
  }


  virtual bool write(Session* session, ObjectId datawriter_id, StreamId stream_id, Complex* topic)
  {
      bool result = false;

      result = message.write(session, datawriter_id, stream_id, &topic->message);
      result &= value.write(session, datawriter_id, stream_id, &topic->value);

      return result;
  }



private:


};

} // namespace test_msgs


#endif // _TEST_MSGS_COMPLEX_HPP_
